* Questions to answer
** TODO What is the < in the sed command?
** TODO document optoins for set
 
* env shebang
#+begin_src bash
#!/usr/bin/env bash
#+end_src

* if variable is not defined as an environment variable, set to “”
#+begin_src bash
${BUILD_IN_PROGRESS:-""}
#+end_src

* Loop against an array
#+begin_src bash
DNS_ENTRY=foo.bar
# Create an array with names of all servers in region
declare -a ns=(server1
server2
server3)
# Loop through array with ssh and dig for the current answer
for HOST in ${ns[@]}; do   
    dig PTR @${HOST} +noedns +noall +comm +ans ${DNS_ENTRY}" ;
done
#+end_src

* Check if values are in an array
#+begin_src bash
declare -a FRUITS=("APPLE" "PEAR" "BANANA")
CURRENT_FRUIT="APPLE"
[[ "${FRUITS[@]} " =~ "${CURRENT_FRUIT} " ]] && echo "YES" || echo "NO";
# YES
CURRENT_FRUIT="ORANGE"
[[ "${FRUITS[@]} " =~ "${CURRENT_FRUIT} " ]] && echo "YES" || echo "NO";
# NO
#+end_src

* conditionals
#+begin_src bash
BUILD_IN_PROGRESS=${BUILD_IN_PROGRESS:-""}
PREPROD=${PREPROD:-""}
declare -r CURRENT_LOG="/var/log/example.log"
declare -r SAMPLE_LOG="/tmp/sample.log"

if [ -z "${PREPROD}" ] && [ -z "${BUILD_IN_PROGRESS}" ]; then
  if [ ! -f "${CURRENT_LOG}" ]; then
    (echo "${LOG_SAMPLE} does not exist" && exit 1)
  else
    (timeout 5 tail -f  ${CURRENT_LOG} > ${SAMPLE_LOGS) || true \
    [[ ! $(grep -i error ${SAMPLE_LOG}) ]] || \
      (echo "Errors were found in logs!" && exit 1)
  fi
fi
#+end_src

* IFS syntax
#+begin_src bash
person_age="Bob|27,Mary|31,Adrian|65,Liz|48"

IFS=',' read -ra user_pairs <<< "$person_age"

for up in "${user_pairs[@]}"; do
  IFS='|' read -ra user_pairs <<< "$up"
    echo "${user_pairs[0]} is ${user_pairs[1]} years old"
done
#+end_src

* -n vs. -z
# needs to be a string arg for -n
#+begin_src bash
bash-3.2$ if [ -n "$UNSET" ]; then echo "I should do something"; fi
bash-3.2$ UNSET=nowset
bash-3.2$ if [ -n "$UNSET" ]; then echo "I should do something"; fi
I should do something
#+end_src

 #+begin_src bash
 ENFORCE_FIREWALL=true
if [ -n "$ENFORCE_FIREWALL" ]; then
   export TAGS="enable-rules,enforce-firewall"
 else
   export TAGS="enables-rules"
 fi
 #+end_src

#+begin_src bash
$ echo $TAGS
$ enable-rules,enforce-firewall
#+end_src

* Command line arguments and conditionals - from Red Hat cert lab
# Started with
#+begin_src bash
#!/usr/bin/env bash

ARG=$1

if [$ARG = "me"]
    echo "Yes, I'm awesome.";
elsif [$ARG = "them"]
    echo "Okay, they are awesome, too.";
else
    echo "Usage ./awesome.sh me\|them"
#+end_src

# ended with
#+begin_src bash
#!/usr/bin/env bash

ARG=$1

if [ "${ARG}" = "me" ]; then
    echo "Yes, I'm awesome."
elif [ "${ARG}" = "them" ]; then
    echo "Okay, they are awesome, too."
else
    echo "Usage ./awesome.sh me\|them"
fi
#+end_src

* set
#+begin_src bash
set -eu
#+end_src

* Defining a function
#+begin_src bash
probe() ( 
    ping -qnc2 www.google.com | \
        grep round-trip && \ 
        date +"OK %D %T"
    )
#+end_src
* Answer to the sed puzzle
#+begin_src bash
[james@Jamess-MBP: ~]$ cat ~/test/sample.data
102
071
210
153

while read X;
    do SUM+=$X; 
done < <(gsed -e 's/^0//'  sample.data)
#+end_src
* Check if arguments are empty
#+begin_src bash

if [ $# -eq 0 ]
  then
    echo "No arguments supplied"
fi
#+end_src

* mkdir /var/log/tmp || true 
that command creates /var/log/tmp  but if the directory already exists it will fail and exit 1 (or some other number other than 0)

so basically, if the command fails creating the directory, it won't make the 
Dockerfile execution exit the build process

because of the ||

if either the commands exits 0, mkdir /var/log/tmp  or true , then it will work

* Check if a file or directory exists

#+begin_src bash
FILE=/etc/docker
if [ -d "$FILE" ]; then
    echo "$FILE is a directory."
fi
#+end_src

#+begin_src bash
FILE=/etc/resolv.conf
if [ -f "$FILE" ]; then
    echo "$FILE exists."
else 
    echo "$FILE does not exist."
fi
#+end_src

* Iterative over key, value pairs in bash

The keys are accessed using an exclamation point: ${!array[@]}, the values are accessed using ${array[@]}.

declare -A REGION_INFO=([yny]=ap-chuncheon-1
[hyd]=ap-hyderabad-1
[mel]=ap-melbourne-1
[bom]=ap-mumbai-1
[kix]=ap-osaka-1
[icn]=ap-seoul-1)

for i in "${!REGION_INFO[@]}"; do oci --profile "${PROFILE}" --region "${i}" os bucket delete --namespace ${NAMESPACE} --bucket-name "${REGION_INFO[$i]}--OracleLinux-OL8-unused-x86_64" --empty --force; done
